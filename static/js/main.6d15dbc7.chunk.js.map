{"version":3,"sources":["components/Header/index.js","components/Footer/index.js","components/Layout/index.js","actions/stocks/index.js","actions/stocks/stockFactory.js","components/Widget/index.js","components/Table/index.js","components/StocksTable/index.js","components/TradeForm/index.js","components/TradesTable/index.js","containers/App/index.js","actions/trades/index.js","actions/constants.js","components/Home/index.js","routes/index.js","app/middleware.js","reducers/__MOCKS__/data.js","reducers/stocks/index.js","reducers/trades/index.js","app/reducer.js","app/store.js","app/index.js","index.js"],"names":["Container","styled","header","_templateObject","Title","h1","_templateObject2","Header","react_default","a","createElement","Footer_templateObject","Footer","Footer_Container","GlobalStyle","createGlobalStyle","Layout_templateObject","normalize","div","Layout_templateObject2","Content","_templateObject3","Layout","props","react","components_Header","Layout_Container","children","components_Footer","stockFactory","calculateDividendYield","stock","price","type","lastDividend","fixedDividend","parValue","calculatePeRatio","calculateGeometricMean","trades","prices","map","item","parseInt","value","reduce","b","Math","pow","length","calculateVolumeWeightedStockPrice","quantity","StockFactory","Widget_templateObject","Widget_templateObject2","Body","Widget_templateObject3","title","h4","_templateObject4","Widget","Widget_Container","Widget_Header","Widget_Title","Table","table","Table_templateObject","Td","td","Table_templateObject2","Th","Table_templateObject3","NoData","p","Table_templateObject4","TableComponent","colDefs","col","index","key","rowData","colSpan","row","Object","keys","defaultProps","StocksTable","this","handleGetStocks","components_Widget","components_Table","data","stocksData","stockSymbol","dividendYield","peRatio","geometricMean","volumeWeightedStockPrice","React","Component","FormRow","TradeForm_templateObject","Input","input","TradeForm_templateObject2","Select","select","TradeForm_templateObject3","Button","button","TradeForm_templateObject4","TradeForm","state","handleInputChange","event","_this","setState","defineProperty","target","name","handleSubmitTrade","handleAddTrade","objectSpread","handleGetStockSymbols","_this$state","placeholder","onChange","stockSymbols","symbol","id","disabled","onClick","TradesTable","handleGetTrades","tradesData","timestamp","toLocaleString","sort","Date","containerCreator","connect","stocks","dispatch","trade","payload","getState","historicalTradeData","filter","updatedStocks","lastPrice","stockActions","StocksTableContainer","TradeFormContainer","TradesTableContainer","TradeTable","Grid","Home_templateObject","SideBar","aside","Home_templateObject2","section","Home_templateObject3","Home_templateObject4","Home","Home_TradesTable","Home_StocksTable","Routes","components_Layout","react_router","path","component","middleware","thunk","MOCK_STOCKS","uuid","MOCK_STOCK_SYMBOLS","initialState","reducer","arguments","undefined","actions","tradesReducer","concat","toConsumableArray","combineReducers","stockReducer","tradeReducer","createStore","rootReducer","applyMiddleware","apply","App","es","store","react_router_dom","routes","root","document","getElementById","ReactDOM","render","app"],"mappings":"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","file":"static/js/main.6d15dbc7.chunk.js","sourcesContent":["// @flow\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.header`\r\n  position: fixed;\r\n  display: flex;\r\n  flex: 1;\r\n  align-items: center;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 50px;\r\n  padding: 0 5rem;\r\n  background: #ffffff;\r\n  border-bottom: 2px solid #dddddd;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  margin: 0;\r\n  padding: 0;\r\n  font-size: 1.5rem;\r\n`;\r\n\r\nfunction Header() {\r\n  return (\r\n    <Container>\r\n      <Title>Stock Trades</Title>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","// @flow\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.header`\r\n  position: fixed;\r\n  bottom: 0;\r\n  width: 100%;\r\n  height: 40px;\r\n  padding: 0 5rem;\r\n  background: #ffffff;\r\n  border-top: 2px solid #dddddd;\r\n`;\r\n\r\nfunction Footer() {\r\n  return <Container />;\r\n}\r\n\r\nexport default Footer;\r\n","// @flow\r\nimport * as React from 'react';\r\nimport styled, { createGlobalStyle } from 'styled-components';\r\nimport { normalize } from 'polished';\r\n\r\nimport Header from '../Header';\r\nimport Footer from '../Footer';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  ${normalize()}\r\n\r\n  *,\r\n  *:before,\r\n  *:after {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  ::-webkit-scrollbar {\r\n    width: 0.5rem;\r\n    height: 0.5rem;\r\n  }\r\n  \r\n  ::-webkit-scrollbar-track {\r\n    background: rgba(180, 178, 183, 0.3);\r\n    border: 1px solid rgba(180, 178, 183, 0.3);\r\n  }\r\n  \r\n  ::-webkit-scrollbar-thumb {\r\n    cursor: pointer;\r\n    background: rgba(0, 0, 0, 0.3);\r\n    border: 1px solid rgba(180, 178, 183, 0.3);\r\n  }\r\n  \r\n  ::-webkit-scrollbar-thumb:hover {\r\n    background: rgba(0, 0, 0, 0.5);\r\n    border-color: rgba(180, 178, 183, 0.5);\r\n  }\r\n  \r\n  ::-webkit-scrollbar-corner {\r\n    background-color: transparent;\r\n  }\r\n\r\n  body {\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    font-size: 1rem;\r\n    line-height: 1.5;\r\n    color: #656565;\r\n    background-color: #F2F2F4;\r\n  }\r\n`;\r\n\r\nconst Container = styled.div`\r\n  height: calc(100vh - 150px);\r\n  margin-top: 80px;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  height: 100%;\r\n  padding: 0 5rem;\r\n  overflow-y: auto;\r\n`;\r\n\r\ntype LayoutProps = {\r\n  children: React.Node\r\n};\r\n\r\nfunction Layout(props: LayoutProps) {\r\n  return (\r\n    <React.Fragment>\r\n      <GlobalStyle />\r\n      <Header />\r\n      <Container>\r\n        <Content>{props.children}</Content>\r\n      </Container>\r\n      <Footer />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Layout;\r\n","// @flow\r\nimport { Dispatch } from 'redux';\r\n\r\nimport * as actionTypes from '../constants';\r\nimport type { GlobalState } from '../../app/reducer';\r\nimport type { Stock } from '../../types/stockTypes';\r\nimport type { TradeSubmission } from '../../types/tradeTypes';\r\nimport StockFactory from './stockFactory';\r\n\r\nconst stockFactory = StockFactory();\r\n\r\nexport const getStocks = () => ({\r\n  type: actionTypes.GET_STOCKS\r\n});\r\n\r\nexport const getStockSymbols = () => ({\r\n  type: actionTypes.GET_STOCK_SYMBOLS\r\n});\r\n\r\nexport const updateStock = (payload: Array<Stock>) => ({\r\n  type: actionTypes.UPDATE_STOCK,\r\n  payload\r\n});\r\n\r\nexport const handleUpdateStock = (trade: TradeSubmission) => (\r\n  dispatch: Dispatch,\r\n  getState: () => GlobalState\r\n) => {\r\n  const { stocksData } = getState().stocks;\r\n  const { tradesData } = getState().trades;\r\n\r\n  // Ensure price is a number from input.\r\n  const price = parseInt(trade.price, 10);\r\n\r\n  // Get all historic trades associated with the stock traded upon.\r\n  const historicalTradeData = tradesData.filter(\r\n    stock => stock.stockSymbol === trade.stockSymbol\r\n  );\r\n\r\n  const updatedStocks = stocksData.map(stock => {\r\n    if (stock.stockSymbol === trade.stockSymbol) {\r\n      return {\r\n        ...stock,\r\n        dividendYield: stockFactory.calculateDividendYield(stock, price),\r\n        geometricMean: stockFactory.calculateGeometricMean(historicalTradeData),\r\n        lastPrice: price,\r\n        peRatio: stockFactory.calculatePeRatio(stock, price),\r\n        volumeWeightedStockPrice: stockFactory.calculateVolumeWeightedStockPrice(\r\n          historicalTradeData\r\n        )\r\n      };\r\n    }\r\n    return stock;\r\n  });\r\n\r\n  dispatch(updateStock(updatedStocks));\r\n};\r\n","// @flow\r\nimport type { Stock } from '../../types/stockTypes';\r\nimport type { Trade } from '../../types/tradeTypes';\r\n\r\nconst StockFactory = () => {\r\n  const calculateDividendYield = (stock: Stock, price: number) => {\r\n    return stock.type === 'common'\r\n      ? stock.lastDividend / price\r\n      : (stock.fixedDividend * stock.parValue) / price;\r\n  };\r\n\r\n  const calculatePeRatio = (stock: Stock, price: number) => {\r\n    // Not sure if lastDividend is the correct value to use here?\r\n    return stock.lastDividend > 0 ? price / stock.lastDividend : 0;\r\n  };\r\n\r\n  const calculateGeometricMean = (trades: Array<Trade>): number => {\r\n    // Firstly get all prices for each trade.\r\n    const prices = trades.map(item => parseInt(item.price, 10));\r\n    // Then get the total sum of each price times the last\r\n    const value = prices.reduce((a, b) => a * b);\r\n    // Finally return the sqr N of the value over prices.length.\r\n    return Math.pow(value, 1 / prices.length);\r\n  };\r\n\r\n  const calculateVolumeWeightedStockPrice = (trades: Array<Trade>): number => {\r\n    // Firstly return an array of price * quantity for each trade.\r\n    const totals = trades.map(\r\n      item => parseInt(item.price, 10) * parseInt(item.quantity, 10)\r\n    );\r\n    // Then return the sum of that array.\r\n    const sumTotals = totals.reduce((a, b) => a + b);\r\n\r\n    // Secondly return an array of quantity values for each trade.\r\n    const quantities = trades.map(item => parseInt(item.quantity, 10));\r\n    // Then return the sum of that array.\r\n    const sumQuantities = quantities.reduce((a, b) => a + b);\r\n\r\n    // Finally return the value of totals / quantities\r\n    return sumTotals / sumQuantities;\r\n  };\r\n\r\n  return {\r\n    calculateDividendYield,\r\n    calculatePeRatio,\r\n    calculateGeometricMean,\r\n    calculateVolumeWeightedStockPrice\r\n  };\r\n};\r\n\r\nexport default StockFactory;\r\n","// @flow\r\nimport * as React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div``;\r\n\r\nconst Header = styled.div`\r\n  padding: 0.625rem 1.25rem;\r\n  background: #999999;\r\n  border-radius: 0.625rem 0.625rem 0 0;\r\n`;\r\n\r\nconst Body = styled.div`\r\n  padding: 1.25rem;\r\n  background: #ffffff;\r\n  border-radius: ${props => (props.title ? '0 0 .625rem .625rem' : '.625rem')};\r\n`;\r\n\r\nconst Title = styled.h4`\r\n  margin: 0;\r\n  color: #ffffff;\r\n`;\r\n\r\ntype WidgetProps = {\r\n  children: React.Node,\r\n  title?: string\r\n};\r\n\r\nfunction Widget(props: WidgetProps) {\r\n  return (\r\n    <Container>\r\n      {props.title && (\r\n        <Header>\r\n          <Title>{props.title}</Title>\r\n        </Header>\r\n      )}\r\n      <Body title={props.title}>{props.children}</Body>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Widget;\r\n","// @flow\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Table = styled.table`\r\n  width: 100%;\r\n  border-spacing: 0;\r\n  border-collapse: collapse;\r\n  border-bottom: 2px solid #ddd;\r\n`;\r\n\r\nconst Td = styled.td`\r\n  padding: 0.625rem;\r\n  border: 1px solid #ddd;\r\n  background: white;\r\n`;\r\n\r\nconst Th = styled(Td)`\r\n  padding: 0.625rem;\r\n  text-align: left;\r\n  font-weight: bold;\r\n  background: #ededed;\r\n`;\r\n\r\nconst NoData = styled.p`\r\n  margin: 0;\r\n  text-align: center;\r\n`;\r\n\r\ntype TableProps = {\r\n  colDefs: Array<string>,\r\n  rowData: Array<any>\r\n};\r\n\r\nfunction TableComponent(props: TableProps) {\r\n  return (\r\n    <Table>\r\n      <thead>\r\n        <tr>\r\n          {props.colDefs.map((col, index) => (\r\n            <Th key={index}>{col}</Th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {props.rowData.length === 0 && (\r\n          <tr>\r\n            <Td colSpan={props.colDefs.length}>\r\n              <NoData>You currently have no entries to display.</NoData>\r\n            </Td>\r\n          </tr>\r\n        )}\r\n\r\n        {props.rowData.map((row, index) => (\r\n          <tr key={index}>\r\n            {Object.keys(row).map((item, index) => (\r\n              <Td key={index}>{row[item]}</Td>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n}\r\n\r\nTableComponent.defaultProps = {\r\n  colDefs: [],\r\n  rowData: []\r\n};\r\n\r\nexport default TableComponent;\r\n","// @flow\r\nimport React from 'react';\r\n\r\nimport type { Stock } from '../../types/stockTypes';\r\nimport Widget from '../Widget';\r\nimport Table from '../Table';\r\n\r\ntype StocksTableUi = {\r\n  dividendYield: number,\r\n  geometricMean: number,\r\n  peRatio: number,\r\n  stockSymbol: string,\r\n  volumeWeightedStockPrice: number\r\n};\r\n\r\ntype StocksTableProps = {\r\n  stocksData: Array<Stock>,\r\n  handleGetStocks: () => void\r\n};\r\n\r\nconst colDefs = [\r\n  'Stock',\r\n  'Dividend Yield',\r\n  'P/E Ratio',\r\n  'Geometric Mean',\r\n  'Volume Weighted Stock Price'\r\n];\r\n\r\nexport const formatData = (data: Array<Stock>): Array<StocksTableUi> => {\r\n  return data.map(item => ({\r\n    stockSymbol: item.stockSymbol,\r\n    dividendYield: item.dividendYield,\r\n    peRatio: item.peRatio,\r\n    geometricMean: item.geometricMean,\r\n    volumeWeightedStockPrice: item.volumeWeightedStockPrice\r\n  }));\r\n};\r\n\r\nexport default class StocksTable extends React.Component<StocksTableProps> {\r\n  componentDidMount(): void {\r\n    this.props.handleGetStocks();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Widget title=\"My Stocks\">\r\n        <Table colDefs={colDefs} rowData={formatData(this.props.stocksData)} />\r\n      </Widget>\r\n    );\r\n  }\r\n}\r\n","// @flow\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport type { StockSymbols } from '../../types/stockTypes';\r\nimport type { TradeSubmission } from '../../types/tradeTypes';\r\nimport Widget from '../Widget';\r\n\r\nconst FormRow = styled.div`\r\n  margin-top: 10px;\r\n\r\n  &:first-child {\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  width: 100%;\r\n  padding: 0.625rem;\r\n  border-radius: 0.625rem;\r\n  border: 0 none;\r\n  background: #ededed;\r\n`;\r\n\r\nconst Select = styled.select`\r\n  width: 100%;\r\n  padding: 0.625rem;\r\n  border-radius: 0.625rem;\r\n  border: 0 none;\r\n  background: #ededed;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  width: 100%;\r\n  padding: 0.625rem;\r\n  border-radius: 0.625rem;\r\n  border: 0 none;\r\n  background: #337ab7;\r\n  color: #ffffff;\r\n  cursor: pointer;\r\n\r\n  &[disabled] {\r\n    opacity: 0.5;\r\n  }\r\n`;\r\n\r\ntype TradeFormProps = {\r\n  handleAddTrade: TradeSubmission => void,\r\n  handleGetStockSymbols: () => void,\r\n  stockSymbols: Array<StockSymbols>\r\n};\r\n\r\ntype TradeFormState = TradeSubmission & {};\r\n\r\nexport default class TradeForm extends React.Component<\r\n  TradeFormProps,\r\n  TradeFormState\r\n> {\r\n  state = {\r\n    price: 0,\r\n    quantity: 0,\r\n    stockSymbol: ''\r\n  };\r\n\r\n  componentDidMount(): void {\r\n    this.props.handleGetStockSymbols();\r\n  }\r\n\r\n  handleInputChange = (event: SyntheticInputEvent<EventTarget>) => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  handleSubmitTrade = () => {\r\n    this.props.handleAddTrade({ ...this.state });\r\n    this.setState({\r\n      price: 0,\r\n      quantity: 0,\r\n      stockSymbol: ''\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { quantity, stockSymbol, price } = this.state;\r\n\r\n    return (\r\n      <Widget title=\"Make a trade\">\r\n        <form>\r\n          <FormRow>\r\n            <Select\r\n              placeholder=\"Stock\"\r\n              name=\"stockSymbol\"\r\n              onChange={this.handleInputChange}\r\n              value={stockSymbol}\r\n            >\r\n              <option>Choose Stock</option>\r\n              {this.props.stockSymbols.map(symbol => {\r\n                return (\r\n                  <option key={symbol.id} value={symbol.stockSymbol}>\r\n                    {symbol.stockSymbol}\r\n                  </option>\r\n                );\r\n              })}\r\n            </Select>\r\n          </FormRow>\r\n          <FormRow>\r\n            <Input\r\n              placeholder=\"Price\"\r\n              name=\"price\"\r\n              type=\"number\"\r\n              onChange={this.handleInputChange}\r\n              value={price > 0 ? price : ''}\r\n            />\r\n          </FormRow>\r\n          <FormRow>\r\n            <Input\r\n              placeholder=\"Quantity\"\r\n              name=\"quantity\"\r\n              type=\"number\"\r\n              onChange={this.handleInputChange}\r\n              value={quantity > 0 ? quantity : ''}\r\n            />\r\n          </FormRow>\r\n          <FormRow>\r\n            <Button\r\n              type=\"submit\"\r\n              name=\"submit-button\"\r\n              disabled={quantity === 0 || stockSymbol === '' || price === 0}\r\n              onClick={this.handleSubmitTrade}\r\n            >\r\n              Submit trade\r\n            </Button>\r\n          </FormRow>\r\n        </form>\r\n      </Widget>\r\n    );\r\n  }\r\n}\r\n","// @flow\r\nimport React from 'react';\r\n\r\nimport type { Trade } from '../../types/tradeTypes';\r\nimport Widget from '../Widget';\r\nimport Table from '../Table';\r\n\r\ntype TradesTableUi = {\r\n  price: number,\r\n  quantity: number,\r\n  stockSymbol: string,\r\n  timestamp: string\r\n};\r\n\r\ntype TradesTableProps = {\r\n  tradesData: Array<Trade>,\r\n  handleGetTrades: () => void\r\n};\r\n\r\nconst colDefs = ['Transaction Date', 'Stock', 'Price', 'No. Shares Purchased'];\r\n\r\nexport const formatData = (data: Array<Trade>): Array<TradesTableUi> => {\r\n  return (\r\n    data\r\n      .map(item => ({\r\n        timestamp: item.timestamp.toLocaleString(),\r\n        stockSymbol: item.stockSymbol,\r\n        price: item.price,\r\n        quantity: item.quantity\r\n      }))\r\n      // @DESC - sort the trades in reverse chronological order.\r\n      .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))\r\n  );\r\n};\r\n\r\nexport default class TradesTable extends React.Component<TradesTableProps> {\r\n  componentDidMount(): void {\r\n    this.props.handleGetTrades();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Widget title=\"Recent Trades\">\r\n        <Table colDefs={colDefs} rowData={formatData(this.props.tradesData)} />\r\n      </Widget>\r\n    );\r\n  }\r\n}\r\n","// @flow\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport type { GlobalState } from '../../app/reducer';\r\nimport type { TradeSubmission } from '../../types/tradeTypes';\r\n\r\nimport * as stockActions from '../../actions/stocks';\r\nimport * as tradeActions from '../../actions/trades';\r\n\r\nimport StocksTable from '../../components/StocksTable';\r\nimport TradeForm from '../../components/TradeForm';\r\nimport TradeTable from '../../components/TradesTable';\r\n\r\nexport const mapStateToProps = (state: GlobalState) => ({\r\n  stocksData: state.stocks.stocksData,\r\n  stockSymbols: state.stocks.stockSymbols,\r\n  tradesData: state.trades.tradesData\r\n});\r\n\r\nexport const mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  handleAddTrade: (trade: TradeSubmission) => {\r\n    dispatch(tradeActions.addTrade(trade));\r\n    dispatch(stockActions.handleUpdateStock(trade));\r\n  },\r\n  handleGetStocks: () => dispatch(stockActions.getStocks()),\r\n  handleGetStockSymbols: () => dispatch(stockActions.getStockSymbols()),\r\n  handleGetTrades: () => dispatch(tradeActions.getTrades())\r\n});\r\n\r\nconst containerCreator = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n);\r\n\r\nexport const StocksTableContainer = containerCreator(StocksTable);\r\nexport const TradeFormContainer = containerCreator(TradeForm);\r\nexport const TradesTableContainer = containerCreator(TradeTable);\r\n","// @flow\r\nimport * as actionTypes from '../constants';\r\nimport type { TradeSubmission } from '../../types/tradeTypes';\r\n\r\nexport const addTrade = (payload: TradeSubmission) => ({\r\n  type: actionTypes.ADD_TRADE,\r\n  payload\r\n});\r\n\r\nexport const getTrades = () => ({\r\n  type: actionTypes.GET_TRADES\r\n});\r\n","// @ flow\r\nexport type Actions = {\r\n  type: string,\r\n  payload: any\r\n};\r\n\r\n// STOCKS\r\nexport const GET_STOCKS = 'get_stocks';\r\nexport const GET_STOCK_SYMBOLS = 'get_stock_symbols';\r\nexport const UPDATE_STOCK = 'update_stock';\r\n\r\n// TRADES\r\nexport const ADD_TRADE = 'add_trade';\r\nexport const GET_TRADES = 'get_trades';\r\n","// @flow\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport {\r\n  StocksTableContainer,\r\n  TradeFormContainer,\r\n  TradesTableContainer\r\n} from '../../containers/App';\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 4fr;\r\n  grid-template-rows: auto;\r\n  grid-column-gap: 20px;\r\n  grid-row-gap: 20px;\r\n  grid-template-areas: 'sidebar tradeTable' 'sidebar stocksTable';\r\n`;\r\n\r\nconst SideBar = styled.aside`\r\n  grid-area: sidebar;\r\n`;\r\n\r\nconst TradesTable = styled.section`\r\n  grid-area: tradeTable;\r\n`;\r\n\r\nconst StocksTable = styled.section`\r\n  grid-area: stocksTable;\r\n`;\r\n\r\nfunction Home() {\r\n  return (\r\n    <Grid>\r\n      <SideBar>\r\n        <TradeFormContainer />\r\n      </SideBar>\r\n      <TradesTable>\r\n        <TradesTableContainer />\r\n      </TradesTable>\r\n      <StocksTable>\r\n        <StocksTableContainer />\r\n      </StocksTable>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","// @flow\r\nimport React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport Layout from '../components/Layout';\r\nimport Home from '../components/Home';\r\n\r\nfunction Routes() {\r\n  return (\r\n    <Layout>\r\n      <Switch>\r\n        <Route path=\"/\" component={Home} />\r\n      </Switch>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default Routes;\r\n","// @flow\r\nimport thunk from 'redux-thunk';\r\n\r\nexport default [thunk];\r\n","import { v4 as uuid } from 'uuid';\r\n\r\nexport const MOCK_STOCKS = [\r\n  {\r\n    dividendYield: 0,\r\n    fixedDividend: 0,\r\n    geometricMean: 0,\r\n    id: uuid(),\r\n    lastDividend: 0,\r\n    lastPrice: 0,\r\n    parValue: 100,\r\n    peRatio: 0,\r\n    stockSymbol: 'TEA',\r\n    type: 'common',\r\n    volumeWeightedStockPrice: 0\r\n  },\r\n  {\r\n    dividendYield: 0,\r\n    fixedDividend: 0,\r\n    geometricMean: 0,\r\n    id: uuid(),\r\n    lastDividend: 8,\r\n    lastPrice: 0,\r\n    parValue: 100,\r\n    peRatio: 0,\r\n    stockSymbol: 'POP',\r\n    type: 'common',\r\n    volumeWeightedStockPrice: 0\r\n  },\r\n  {\r\n    dividendYield: 0,\r\n    fixedDividend: 0,\r\n    geometricMean: 0,\r\n    id: uuid(),\r\n    lastDividend: 23,\r\n    lastPrice: 0,\r\n    parValue: 60,\r\n    peRatio: 0,\r\n    stockSymbol: 'ALE',\r\n    type: 'common',\r\n    volumeWeightedStockPrice: 0\r\n  },\r\n  {\r\n    dividendYield: 0,\r\n    fixedDividend: 2,\r\n    geometricMean: 0,\r\n    id: uuid(),\r\n    lastDividend: 8,\r\n    lastPrice: 0,\r\n    parValue: 100,\r\n    peRatio: 0,\r\n    stockSymbol: 'GIN',\r\n    type: 'preferred',\r\n    volumeWeightedStockPrice: 0\r\n  },\r\n  {\r\n    dividendYield: 0,\r\n    fixedDividend: 0,\r\n    geometricMean: 0,\r\n    id: uuid(),\r\n    lastDividend: 13,\r\n    lastPrice: 0,\r\n    parValue: 250,\r\n    peRatio: 0,\r\n    stockSymbol: 'JOE',\r\n    type: 'common',\r\n    volumeWeightedStockPrice: 0\r\n  }\r\n];\r\n\r\nexport const MOCK_STOCK_SYMBOLS = MOCK_STOCKS.map(stock => {\r\n  return {\r\n    id: stock.id,\r\n    stockSymbol: stock.stockSymbol\r\n  };\r\n});\r\n","// @flow\r\nimport * as actionTypes from '../../actions/constants';\r\nimport type { Actions } from '../../actions/constants';\r\nimport type { StockState } from '../../types/stockTypes';\r\nimport { MOCK_STOCKS, MOCK_STOCK_SYMBOLS } from '../__MOCKS__/data';\r\n\r\nexport const initialState = {\r\n  stocksData: [],\r\n  stockSymbols: []\r\n};\r\n\r\nconst reducer = (state: StockState = initialState, actions: Actions) => {\r\n  switch (actions.type) {\r\n    case actionTypes.GET_STOCKS:\r\n      return {\r\n        ...state,\r\n        // @DESC - Simulates loading of existing stocks on load.\r\n        // This would be replaced with api call in real world.\r\n        // This could come from a db or local storage for example.\r\n        stocksData: MOCK_STOCKS\r\n      };\r\n\r\n    case actionTypes.GET_STOCK_SYMBOLS:\r\n      return {\r\n        ...state,\r\n        // @DESC - Simulates loading of existing stock symbols on load.\r\n        // This would be replaced with api call in real world.\r\n        // This could come from a db or local storage for example.\r\n        stockSymbols: MOCK_STOCK_SYMBOLS\r\n      };\r\n\r\n    case actionTypes.UPDATE_STOCK:\r\n      return {\r\n        ...state,\r\n        stocksData: actions.payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","// @flow\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport * as actionTypes from '../../actions/constants';\r\nimport type { Actions } from '../../actions/constants';\r\nimport type { TradeState } from '../../types/tradeTypes';\r\n\r\nexport const initialState = {\r\n  tradesData: []\r\n};\r\n\r\nconst tradesReducer = (state: TradeState = initialState, actions: Actions) => {\r\n  switch (actions.type) {\r\n    case actionTypes.ADD_TRADE:\r\n      return {\r\n        ...state,\r\n        tradesData: [\r\n          ...state.tradesData,\r\n          {\r\n            ...actions.payload,\r\n            id: uuid(),\r\n            timestamp: new Date()\r\n          }\r\n        ]\r\n      };\r\n\r\n    case actionTypes.GET_TRADES:\r\n      return {\r\n        ...state,\r\n        // @DESC - Simulates loading of existing trades on load.\r\n        // This would be replaced with api call in real world.\r\n        // This could come from a db or local storage for example.\r\n        tradesData: state.tradesData\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default tradesReducer;\r\n","// @flow\r\nimport { combineReducers } from 'redux';\r\n\r\nimport type { StockState } from '../types/stockTypes';\r\nimport type { TradeState } from '../types/tradeTypes';\r\n\r\nimport stockReducer from '../reducers/stocks';\r\nimport tradeReducer from '../reducers/trades';\r\n\r\nexport type GlobalState = {\r\n  stocks: StockState,\r\n  trades: TradeState\r\n};\r\n\r\nexport default combineReducers({\r\n  stocks: stockReducer,\r\n  trades: tradeReducer\r\n});\r\n","// @flow\r\nimport { createStore, applyMiddleware } from 'redux';\r\n\r\nimport middleware from './middleware';\r\nimport rootReducer from './reducer';\r\n\r\nexport default createStore(rootReducer, applyMiddleware(...middleware));\r\n","// @flow\r\nimport React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nimport Root from '../routes';\r\nimport store from './store';\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Router>\r\n        <Root />\r\n      </Router>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// @flow\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './app';\r\n\r\nconst root = document.getElementById('root');\r\n\r\nif (root !== null) {\r\n  ReactDOM.render(<App />, root);\r\n}\r\n\r\n// 28QE28XER77988NH\r\n"],"sourceRoot":""}